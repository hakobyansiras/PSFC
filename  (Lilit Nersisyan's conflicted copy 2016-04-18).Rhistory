mutated.graphs[[to]] = list()
if(!psf::edge.exists(g, from, to)){
mutated.graphs[[to]][[mutations$no2act]] = mutate.edge(g, from, to, mutations$no2act)
mutated.graphs[[to]][[mutations$no2inh]] = mutate.edge(g, from, to, mutations$no2inh)
} else if (psf::get.edge.type(g, from, to) == "activation"){
mutated.graphs[[to]][[mutations$act2inh]] = mutate.edge(g, from, to, mutations$act2inh)
mutated.graphs[[to]][[mutations$act2no]] = mutate.edge(g, from, to, mutations$act2no)
} else if (psf::get.edge.type(g, from, to) == "inhibition"){
mutated.graphs[[to]][[mutations$inh2no]] = mutate.edge(g, from, to, mutations$inh2no)
mutated.graphs[[to]][[mutations$inh2act]] = mutate.edge(g, from, to, mutations$inh2act)
}
}
return(mutated.graphs)
}
mutate.path.from(g,from)
mutate.path.from <- function(g, from){
mutated.graphs = list()
for(to in g@nodes){
mutated.graphs[[to]] = list()
if(!psf::edge.exists(g, from, to)){
#       mutated.graphs[[to]][[mutations$no2act]] = mutate.edge(g, from, to, mutations$no2act)
#       mutated.graphs[[to]][[mutations$no2inh]] = mutate.edge(g, from, to, mutations$no2inh)
} else if (psf::get.edge.type(g, from, to) == "activation"){
#       mutated.graphs[[to]][[mutations$act2inh]] = mutate.edge(g, from, to, mutations$act2inh)
#       mutated.graphs[[to]][[mutations$act2no]] = mutate.edge(g, from, to, mutations$act2no)
} else if (psf::get.edge.type(g, from, to) == "inhibition"){
#       mutated.graphs[[to]][[mutations$inh2no]] = mutate.edge(g, from, to, mutations$inh2no)
#       mutated.graphs[[to]][[mutations$inh2act]] = mutate.edge(g, from, to, mutations$inh2act)
}
}
return(mutated.graphs)
}
mutate.path.from(g,from)
mutated.graphs = list()
for(to in g@nodes){
mutated.graphs[[to]] = list()
if(!psf::edge.exists(g, from, to)){
mutated.graphs[[to]][[mutations$no2act]] = mutate.edge(g, from, to, mutations$no2act)
mutated.graphs[[to]][[mutations$no2inh]] = mutate.edge(g, from, to, mutations$no2inh)
} else if (psf::get.edge.type(g, from, to) == "activation"){
mutated.graphs[[to]][[mutations$act2inh]] = mutate.edge(g, from, to, mutations$act2inh)
mutated.graphs[[to]][[mutations$act2no]] = mutate.edge(g, from, to, mutations$act2no)
} else if (psf::get.edge.type(g, from, to) == "inhibition"){
mutated.graphs[[to]][[mutations$inh2no]] = mutate.edge(g, from, to, mutations$inh2no)
mutated.graphs[[to]][[mutations$inh2act]] = mutate.edge(g, from, to, mutations$inh2act)
}
}
mutate.path.from <- function(g, from){
mutated.graphs = list()
for(to in g@nodes){
mutated.graphs[[to]] = list()
if(!psf::edge.exists(g, from, to)){ cat("a")
mutated.graphs[[to]][[mutations$no2act]] = mutate.edge(g, from, to, mutations$no2act)
mutated.graphs[[to]][[mutations$no2inh]] = mutate.edge(g, from, to, mutations$no2inh)
} else if (psf::get.edge.type(g, from, to) == "activation"){ cat("b")
mutated.graphs[[to]][[mutations$act2inh]] = mutate.edge(g, from, to, mutations$act2inh)
mutated.graphs[[to]][[mutations$act2no]] = mutate.edge(g, from, to, mutations$act2no)
} else if (psf::get.edge.type(g, from, to) == "inhibition"){cat("c")
mutated.graphs[[to]][[mutations$inh2no]] = mutate.edge(g, from, to, mutations$inh2no)
mutated.graphs[[to]][[mutations$inh2act]] = mutate.edge(g, from, to, mutations$inh2act)
}
}
return(mutated.graphs)
}
mutate.path.from(g,from)
mutated.graphs = list()
for(to in g@nodes){
mutated.graphs[[to]] = list()
if(!psf::edge.exists(g, from, to)){ cat("a")
mutated.graphs[[to]][[mutations$no2act]] = mutate.edge(g, from, to, mutations$no2act)
mutated.graphs[[to]][[mutations$no2inh]] = mutate.edge(g, from, to, mutations$no2inh)
} else if (psf::get.edge.type(g, from, to) == "activation"){ cat("b")
mutated.graphs[[to]][[mutations$act2inh]] = mutate.edge(g, from, to, mutations$act2inh)
mutated.graphs[[to]][[mutations$act2no]] = mutate.edge(g, from, to, mutations$act2no)
} else if (psf::get.edge.type(g, from, to) == "inhibition"){cat("c")
mutated.graphs[[to]][[mutations$inh2no]] = mutate.edge(g, from, to, mutations$inh2no)
mutated.graphs[[to]][[mutations$inh2act]] = mutate.edge(g, from, to, mutations$inh2act)
}
}
mutate.path.from(g,from)
n
source('D:/Dropbox/Bioinformatics_Group/Leipzig/R_scripts/topology/R/mutated.psf.R', echo=TRUE)
mutate.path.from(g,from)
source('D:/Dropbox/Bioinformatics_Group/Leipzig/R_scripts/topology/R/mutated.psf.R', echo=TRUE)
mutate.path.from(g,from)
source('D:/Dropbox/Bioinformatics_Group/Leipzig/R_scripts/topology/R/mutated.psf.R', echo=TRUE)
mutate.path.from(g,from)
source('D:/Dropbox/Bioinformatics_Group/Leipzig/R_scripts/topology/R/mutated.psf.R', echo=TRUE)
mutate.path.from(g,from)
g.mut = psf::add.kegg.edge.mut(from, to, subtype = "activation", g.mut)
g.mut = g
g.mut = psf::add.kegg.edge.mut(from, to, subtype = "activation", g.mut)
g.mut
source('D:/Dropbox/Bioinformatics_Group/Leipzig/R_scripts/topology/R/mutated.psf.R', echo=TRUE)
mutate.path(g)
library(psf)
mutate.path(g)
source('D:/Dropbox/Bioinformatics_Group/Leipzig/R_scripts/topology/R/mutated.psf.R', echo=TRUE)
mutate.path(g)
ml = mutate.path(g)
ml
gai = ml$`90`$`89`$act2inh
g@edgeData@data$`90|89`
gai@edgeData@data$`90|89`
load("../ani_test/PSF/fc_mat_c_new.RData")
p
order.nodes(g)
ml
load("../ani_test/Results/results_nod-like_wm.RData")
psf.results[[1]]
psf.results[[1]][[1]]$signal.at.sink
mat = matrix(nrow = length(psf.results), ncol = length(psf.results[[1]][[1]]$signal.at.sink))
rownames(mat) = names(psf.results)
rownames(mat)
rownames(fc_mat_c)
colnames(fc_mat_c)
ncol(fc_mat_c)
colnames(mat) = colnames(fc_mat_c)
mat = matrix(nrow = length(psf.results[[1]][[1]]$signal.at.sink), ncol = ncol(fc_mat_c))
colnames(mat) = colnames(fc_mat_c)
rownames(mat) = psf.results[[1]][[1]]$sink.nodes
names(psf.results) = colnames(fc_mat_c)
names(psf.results) = colnames(fc_mat_c)[1:77]
lapply(names(psf.results), function(x) {mat[,x] = psf.results[[x]][[1]]$signal.at.sink})
mat
View(mat)
x = names(psf.results)
x = names(psf.results)[1]
x
psf.results[[x]][[1]]$signal.at.sink
mat[,x]
lapply(names(psf.results), function(x) {mat[,x] = psf.results[[x]][[1]]$signal.at.sink})
mat
for(name in names(psf.results){mat[,x] = psf.results[[x]][[1]]$signal.at.sink})
for(name in names(psf.results){mat[,x] = psf.results[[x]][[1]]$signal.at.sink}
for(name in names(psf.results)){mat[,x] = psf.results[[x]][[1]]$signal.at.sink}
mat
View(mat)
for(name in names(psf.results)){mat[,x] = unlist(psf.results[[x]][[1]]$signal.at.sink)}
View(mat)
colnames(mat) = colnames(fc_mat_c)
colnames(mat)
seq(1:20)
hc_adults = paste0(colnames(fc_mat_c)[1:20],seq(1:20))
hc_adults
hc_children = paste0(colnames(fc_mat_c)[21:34], seq(1:14))
hc_children
colnames(fc_mat_c)[1:34] = c(hc_adults, hc_children)
colnames(fc_mat_c)
mat = matrix(nrow = length(psf.results[[1]][[1]]$signal.at.sink), ncol = ncol(fc_mat_c))
colnames(mat) = colnames(fc_mat_c)
rownames(mat) = psf.results[[1]][[1]]$sink.nodes
names(psf.results) = colnames(fc_mat_c)[1:77]
for(name in names(psf.results)){mat[,name] = unlist(psf.results[[name]][[1]]$signal.at.sink)}
View(mat)
source('D:/Dropbox/Bioinformatics_Group/Leipzig/R_scripts/topology/R/mutated.psf.R', echo=TRUE)
ml
psf.mats = psf.on.mutated.graphs(p, mutated.graphs.list = ml)
source('D:/Dropbox/Bioinformatics_Group/Leipzig/R_scripts/topology/R/mutated.psf.R', echo=TRUE)
psf.mats = psf.on.mutated.graphs(p, mutated.graphs.list = ml)
from
mutated.graphs.list = ml
from = names(mutated.graphs.list)[1]
to = names(mutated.graphs.list[[from]])[1]
to
from
source('D:/Dropbox/Bioinformatics_Group/Leipzig/R_scripts/topology/R/mutated.psf.R', echo=TRUE)
ml = mutate.path(g)
from = names(mutated.graphs.list)[1]
to = names(mutated.graphs.list[[from]])[1]
from
to
source('D:/Dropbox/Bioinformatics_Group/Leipzig/R_scripts/topology/R/mutated.psf.R', echo=TRUE)
ml = mutate.path(g)
mutated.graphs.list = ml
from = names(mutated.graphs.list)[1]
to = names(mutated.graphs.list[[from]])[1]
from
to
mgl = mutated.graphs.list[[from]]
mg = mgl[[to]]
mut = names(mg)[1]
mgg = mg[[mut]]
mgg
mp = p
mp$graph = mgg
mp$order = order.nodes(mgg)
mp$attrs = p$attrs
mp$sink.nodes = p$sink.nodes
mcol = list(p)
mcol
psf.results = psf.from.env.entrez.fc(entrez.fc = fc_mat_c, kegg.collection = mcol, calculate.significance = F)
psf.results = psf.from.env.entrez.fc(entrez.fc = fc_mat_c, kegg.collection, calculate.significance = F)
mcol = list("NOD" = p)
psf.results = psf.from.env.entrez.fc(entrez.fc = fc_mat_c, kegg.collection, calculate.significance = F)
psf.results = psf.from.env.entrez.fc(entrez.fc = fc_mat_c, mcol, calculate.significance = F)
psf.results.mats[[from]][[to]][[mut]] = tabulate.psf.results(psf.results)
tabulate.psf.results(psf.results)
mat = matrix(nrow = length(psf.results[[1]][[1]]$signal.at.sink), ncol = ncol(fc_mat_c))
colnames(mat) = colnames(fc_mat_c)
rownames(mat) = psf.results[[1]][[1]]$sink.nodes
names(psf.results) = colnames(fc_mat_c)
for(name in names(psf.results)){mat[,name] = unlist(psf.results[[name]][[1]]$signal.at.sink)}
mat
psf.results.mats[[from]][[to]][[mut]] = tabulate.psf.results(psf.results)
psf.mat = tabulate.psf.results(psf.results)
f.results[[1]][[1]]$signal.at.sink), ncol = ncol(fc_mat_c))
colnames(mat) = colnames(fc_mat_c)
rownames(mat) = psf.results[[1]][[1]]$sink.nodes
names(psf.results) = colnames(fc_mat_c)
for(name in names(psf.results
)){mat[,name] = unlist(psf.results[[name]][[1]]$signal.at.sink)}
mat
mat = matrix(nrow = length(psf.results[[1]][[1]]$signal.at.sink), ncol = ncol(fc_mat_c))
colnames(mat) = colnames(fc_mat_c)
rownames(mat) = psf.results[[1]][[1]]$sink.nodes
names(psf.results) = colnames(fc_mat_c)
for(name in names(psf.results)){mat[,name] = unlist(psf.results[[name]][[1]]$signal.at.sink)}
source('D:/Dropbox/Bioinformatics_Group/Leipzig/R_scripts/topology/R/mutated.psf.R', echo=TRUE)
psf.mat = tabulate.psf.results(psf.results)
psf.results.mats[[from]][[to]][[mut]] = psf.mat
psf.mat
colnames(fc_mat_c)
load("../ani_test/PSF/fc_mat_c_new.RData")
samplenames = paste0(colnames(fc_mat_c), seq(1:ncol(fc_mat_c)))
samplenames
colnames(fc_mat_c) = samplenames
colnames(fc_mat_c)
rm(list = ls())
source('D:/Dropbox/Bioinformatics_Group/Leipzig/R_scripts/topology/R/mutated.psf.R', echo=TRUE)
ml = mutate.path(g)
psf.mats = psf.on.mutated.graphs(p, mutated.graphs.list = ml)
load("../ani_test/PSF/fc_mat_c_new.RData")
samplenames = paste0(colnames(fc_mat_c), seq(1:ncol(fc_mat_c)))
colnames(fc_mat_c) = samplenames
psf.mats = psf.on.mutated.graphs(p, mutated.graphs.list = ml)
psf.mats
fc_mat_c_s1 = fc_mat_c[,1]
fc_mat_c_s1
source('D:/Dropbox/Bioinformatics_Group/Leipzig/R_scripts/topology/R/mutated.psf.R', echo=TRUE)
fc_mat_c_s1 = fc_mat_c[,1]
psf.mats = psf.on.mutated.graphs(p, mutated.graphs.list = ml, fc_mat_c_s1)
dim(fc_mat_c_s1)
dims(fc_mat_c_s1)
dim(fc_mat_c)
fc_mat_c_s1 = as.matrix(fc_mat_c[,1])
dim(fc_mat_c_s1)
psf.mats = psf.on.mutated.graphs(p, mutated.graphs.list = ml, fc_mat_c_s1)
source('D:/Dropbox/Bioinformatics_Group/Leipzig/R_scripts/topology/R/mutated.psf.R', echo=TRUE)
psf.mats = psf.on.mutated.graphs(p, mutated.graphs.list = ml, fc_mat_c_s1)
psf.mats$`90`$`89`$act2inh
psf.mats$`90`$`89`$act2no
colnames(fc_mat_c_s1)
colnames(fc_mat_c)
fc_mat_c_s1 = as.matrix(fc_mat_c[,1])
rownames(fc_mat_c_s1)
colnames(fc_mat_c_s1) = colnames(fc_mat_c)[1]
ml1 = ml[1]
psf.mats = psf.on.mutated.graphs(p, mutated.graphs.list = ml1, fc_mat_c_s1)
source('D:/Dropbox/Bioinformatics_Group/Leipzig/R_scripts/topology/R/mutated.psf.R', echo=TRUE)
psf.mats = psf.on.mutated.graphs(p, mutated.graphs.list = ml1, fc_mat_c_s1)
psf.mats$`90`$`89`$act2inh
psf.mats = psf.on.mutated.graphs(p, mutated.graphs.list = ml, fc_mat_c_s1)
psf.mats$`90`$`89`$act2inh
save(psf.mats, file = "../topology/psf.mats.fcs1.RData")
fc_mat_c_s1 = fc_mat_c[,1:34]
fc_mat_c_s1
colnames(fc_mat_c_s1)
psf.mats.34 = psf.on.mutated.graphs(p, mutated.graphs.list = ml, fc_mat_c_s1)
ml$'55'$'35'
mutate.path.from(g, "55")
xx = mutate.path.from(g, "55")
xx$'35'
source('D:/Dropbox/Bioinformatics_Group/Leipzig/R_scripts/topology/R/mutated.psf.R', echo=TRUE)
xx = mutate.path.from(g, "55")
source('D:/Dropbox/Bioinformatics_Group/Leipzig/R_scripts/topology/R/mutated.psf.R', echo=TRUE)
xx = mutate.path.from(g, "55")
graph::edgeData(g, attr = "subtype1")
unique(graph::edgeData(g, attr = "subtype1"))
unique(graph::edgeData(g, attr = "subtype2"))
ml = mutate.path(g)
fc_mat_c_s1 = as.matrix(fc_mat_c[,1], drop=F)
colnames(fc_mat_c_s1)
fc_mat_c_s1 = fc_mat_c[,1,drop=F]
colnames(fc_mat_c_s1)
psf.mats = psf.on.mutated.graphs(p, mutated.graphs.list = ml, fc_mat_c_s1)
source('D:/Dropbox/Bioinformatics_Group/Leipzig/R_scripts/topology/R/mutated.psf.R', echo=TRUE)
psf.mats = psf.on.mutated.graphs(p, mutated.graphs.list = ml, fc_mat_c_s1)
psf.mats
psf.mats$`90`$`89`$act2inh
psf.mats$`90`$`87`
psf.mats$`74`$`37`
g1 = ml$'74'$'37'$no2act
g2 = ml$'74'$'37'$no2inh
graph::edgeData(g1, attr="subtype1")
graph::edgeData(g1,"74", '37', attr="subtype1")
graph::edgeData(g2,"74", '37', attr="subtype1")
graph::edgeData(g2,"74", '37', attr="impact")
graph::edgeData(g2,"74", '37', attr="impact")
graph::edgeData(g1,"74", '37', attr="impact")
p
plot.pathway(g, sink.nodes = c('74','37'))
plot.pathway(g, sink.nodes = c('74'))
plot.pathway(g, sink.nodes = c('21','30'))
g1 = ml$'21'$'30'$no2act
g2 = ml$'21'$'30'$act2inh
g1 = ml$'21'$'30'$act2no
psf.mats$'21'$'30'
psf.mats$'21'$'30'$act2no - psf.mats$'21'$'30'$act2inh
lapply(psf.mats[[1]], function(x){x[[1]] - x[[2]]})
lapply(psf.mats[[1]], function(x){sum(x[[1]] - x[[2]])})
sum(lapply(psf.mats[[1]], function(x){sum(x[[1]] - x[[2]])}))
unlist(lapply(psf.mats[[1]], function(x){sum(x[[1]] - x[[2]])}))
sum(unlist(lapply(psf.mats[[1]], function(x){sum(x[[1]] - x[[2]])})))
lapply(psf.mats, function(x){sum(unlist(lapply(x, function(x){sum(x[[1]] - x[[2]])})))})
unlist(lapply(psf.mats, function(x){sum(unlist(lapply(x, function(x){sum(x[[1]] - x[[2]])})))}))
save(psf.mats, file = "../topology/psf.mats.fcs1.RData")
fc_mat_c_s1 = fc_mat_c[,1:34]
psf.mats.34 = psf.on.mutated.graphs(p, mutated.graphs.list = ml, fc_mat_c_s1)
g = ml$'31'$'21'$inh2no
plot.pathway(g, sink.nodes = c('31','21'))
mp = p
mp$graph = g
mp$order = order.nodes(g)
mp$attrs = p$attrs
mp$sink.nodes = p$sink.nodes
mcol = list("NOD" = mp)
fc.mat = fc_mat_c_s1
psf.results = psf.from.env.entrez.fc(entrez.fc = fc.mat, mcol, calculate.significance = F)
psf.results[[1]]$NOD$signal.at.sink
kegg.collection = psf::generate.kegg.collection.from.kgml(kgml.files = c(pathway.id))
psf.results.or = psf.from.env.entrez.fc(entrez.fc = fc.mat, kegg.collection, calculate.significance = F)
psf.results.or[[1]]$`NOD-like receptor signaling pathway`$signal.at.sink
psf.results[[1]]$NOD$signal.at.sink
plot.pathway(g, sink.nodes = c('31','21','32'))
edgeData(p$graph, '31', '21', attr="impact")
edgeData(g, '31', '21', attr="impact")
plot.pathway(p$graph)
nodeData(g, '99')
which(g@nodes == "99")
which(g@nodes == "39")
which(g@nodes == "37")
nodeData(g, 25)
nodeData(g, 25, attr="expression")
nodeData(g, 25, attr="exp")
nodeData(g, "37", attr="exp")
nodeData(g, "37", attr="expression")
nodeData(g, "39", attr="expression")
nodeData(g, "31", attr="expression")
nodeData(g, "21", attr="expression")
nodeData(p$graph, "21", attr="expression")
nodeData(psf.results[[1]]$NOD$graph, "21", attr = "expression")
nodeData(psf.results[[1]]$NOD$graph, "31", attr = "expression")
nodeData(psf.results[[1]]$NOD$graph, "37", attr = "expression")
nodeData(psf.results[[1]]$NOD$graph, "39", attr = "expression")
nodeData(psf.results.or[[1]]$NOD$graph, "31", attr = "expression")
nodeData(psf.results.or[[1]]$NOD$graph, "31", attr = "signal")
nodeData(psf.results.or[[1]]$NOD$graph, "21", attr = "signal")
nodeData(psf.results[[1]]$NOD$graph, "21", attr = "signal")
g.or = p$graph
g = psf.results[[1]]$NOD$graph
g.or = psf.results.or[[1]]$`NOD-like receptor signaling pathway`$graph
nodeData(g, "21", attr = "signal")
nodeData(g, "21", attr = "expression")
nodeData(g.or, "31", attr = "expression")
nodeData(g, "31", attr = "expression")
nodeData(g.or, "31", attr = "signal")
nodeData(g.or, "11", attr = "signal")
nodeData(g.or, "21", attr = "signal")
nodeData(g, "21", attr = "signal")
nodeData(g.or, "31", attr = "signal")
nodeData(g, "31", attr = "signal")
nodeData(g.or, "31", attr = "expressino")
nodeData(g.or, "31", attr = "expression")
nodeData(g, "31", attr = "expression")
edgeData(g, "31", "21", attr = "impact")
edgeData(g.or, "31", "21", attr = "impact")
get.edge.type(g, "31", "21")
get.edge.type(g.or, "31", "21")
nodeData(g.or, "37", attr = "expression")
nodeData(g.or, "37", attr = "signal")
g.or.37 = nodeData(g.or, "37", attr = "signal")
g.37 = nodeData(g, "37", attr = "signal")
g.37
g.or.37 = unlist(nodeData(g.or, "37", attr = "signal"))
g.37 = unlist(nodeData(g, "37", attr = "signal"))
g.39 = unlist(nodeData(g, "39", attr = "signal"))
g.or.39 = unlist(nodeData(g.or, "39", attr = "signal"))
g.39
g.or.39
g.or.31 = unlist(nodeData(g.or, "31", attr = "signal"))
g.31 = unlist(nodeData(g, "31", attr = "signal"))
g.31
g.or.31
g.31 = unlist(nodeData(g, "31", attr = "expression"))
g.31
psf.results[[1]]$NOD$order
psf.results.or[[1]]$`NOD-like receptor signaling pathway`$order
g.31
prop.37 = g.37/(5+g.37)
prop.or.37 = g.37/(5+g.37+g.31)
prop.37
prop.or.37
lapply(psf.mats, function(x){sum(unlist(lapply(x, function(x){sum(x[[1]] - x[[2]])})))})
unlist(lapply(psf.mats, function(x){sum(unlist(lapply(x, function(x){sum(x[[1]] - x[[2]])})))}))
sigs.or = psf.results.or[[1]]$`NOD-like receptor signaling pathway`$signal.at.sink
unlist(lapply(psf.mats, function(x){sum(unlist(lapply(x, function(x){sum(x[[1]] -sigs.or) + sum(x[[2]]-sigs.or)})))}))
load("../ani_test/Results/results_nod-like_mut.RData")
psf.results.mut = psf.results
load("../ani_test/Results/results_nod-like_wm.RData")
psf.results.wm = psf.results
g.wm = psf.results.wm[[1]]$`NOD-like receptor signaling pathway`$graph
g.mut = psf.results.wm[[43]]$`NOD-like receptor signaling pathway`$graph
nodeData(g.wm, "21", "signal")
nodeData(g.mut, "21", "signal")
psf.mats$'31'$'21'$inh2no["32",1]
nodeData(g.mut, "32", "signal")
nodeData(g.wm, "32", "signal")
fc_mat_c_s1 = fc_mat_c[,43,drop=F]
psf.mats.43 = psf.on.mutated.graphs(p, mutated.graphs.list = ml, fc_mat_c_s1)
ml1 = ml$31
ml1 = ml$'31'
psf.mats.43 = psf.on.mutated.graphs(p, mutated.graphs.list = ml1, fc_mat_c_s1)
ml1$'21'
psf.mats.43$'21'$inh2no
which(names(ml) == "31")
ml1 = ml[31]
psf.mats.43 = psf.on.mutated.graphs(p, mutated.graphs.list = ml1, fc_mat_c_s1)
ml1 = ml[33]
psf.mats.43 = psf.on.mutated.graphs(p, mutated.graphs.list = ml1, fc_mat_c_s1)
psf.mats.43$`31`$'21'
psf.mats.43$`31`$'21'$inh2no
nodeData(g.mut, "32", "signal")
g.mut = psf.results.mut[[1]]$`NOD-like receptor signaling pathway`$graph
nodeData(g.mut, "32", "signal")
source('D:/Dropbox/Bioinformatics_Group/Leipzig/R_scripts/topology/R/mutated.psf.R', echo=TRUE)
ml = mutate.path(g)
fc.mat = fc_mat_c[,1:34]
psf.mats = psf.on.mutated.graphs(p, mutated.graphs.list = ml, fc.mat)
library(psf)
psf.mats = psf.on.mutated.graphs(p, mutated.graphs.list = ml, fc.mat)
save(psf.mats, file = "../topology/psf.mats.34.RData")
length(psf.mats)
library(psf)
source('D:/Dropbox/Bioinformatics_Group/Leipzig/R_scripts/topology/R/mutated.psf.R', echo=TRUE)
fc.mat = fc_mat_c[,1,drop=F]
colnames(fc.mat)
ml = mutate.path(g)
source('D:/Dropbox/Bioinformatics_Group/Leipzig/R_scripts/topology/R/mutated.psf.R', echo=TRUE)
psf.mats = psf.on.mutated.graphs(p, mutated.graphs.list = ml, fc.mat)
psf.mats = psf.on.mutated.graphs(p, mutated.graphs.list = ml, fc.mat)
psf.mats$'31'$'21'$inh2no
psf.mats.this = psf.mats
load("../topology/psf.mats.fcs1.RData")
psf.mats$'31'$'21'$inh2no
load("../ani_test/Results/results_nod-like_wm.RData")
psf.results = psf.from.env.entrez.fc(entrez.fc = fc.mat, kegg.collection, calculate.significance = F, split = F)
psf.results[[1]]$`NOD-like receptor signaling pathway`$signal.at.sink
gm = ml$'21'$'31'$no2inh
gm
go = kegg.collection$`NOD-like receptor signaling pathway`$graph
edgeData(gm, '31', '21', attr = "impact")
edgeData(go, '31', '21', attr = "impact")
gm = ml$'31'$'21'$no2inh
gm = ml$'31'$'21'$inh2no
edgeData(gm, '31', '21', attr = "impact")
psf.mats.this$'31'$'21'$inh2no
psf.mats.this$'31'$'21'$inh2act
gm = ml$'31'$'21'$inh2act
edgeData(gm, '31', '21', attr = "impact")
gm = ml$'31'$'21'$inh2no
nodeData(go, "31", attr  = "signal")
nodeData(go, "31", attr  = "expression")
nodeData(go, "21", attr  = "expression")
go = psf.results[[1]]$`NOD-like receptor signaling pathway`$graph
nodeData(go, "21", attr  = "expression")
nodeData(go, "21", attr  = "signal")
nodeData(go, "31", attr  = "signal")
nodeData(go, "31", attr  = "expression")
psf.mats = psf.on.mutated.graphs(p, mutated.graphs.list = ml, fc.mat)
psf.mats$'31'$'21'$inh2no
psf.results[[1]]$`NOD-like receptor signaling pathway`$signal.at.sink
psf.results = psf.from.env.entrez.fc(entrez.fc = fc.mat, kegg.collection, calculate.significance = F, split = F)
psf.results[[1]]$`NOD-like receptor signaling pathway`$signal.at.sink
psf.mats$'31'$'21'$inh2act
save(psf.mats, file = "../topology/psf.mats.updates1.RData")
tabulate.psf.results(psf.results, fc.mat)
adult1.or = tabulate.psf.results(psf.results, fc.mat)
save(adult1.or, file = "../topology/adult1.RData")
fc.mat = fc_mat_c[,1:43]
fc.mat = fc_mat_c[,43,drop=FALSE]
colnames(fc.mat)
mlt = ml$'31'$'21'$inh2no
psf.mats.43t = psf.on.mutated.graphs(p, mutated.graphs.list = mlt, fc.mat)
psf.mats.43t
mgg = mlt
mp = p
mp$graph = mgg
mp$order = order.nodes(mgg)
mp$attrs = p$attrs
mp$sink.nodes = p$sink.nodes
mcol = list("NOD" = mp)
psf.results = psf.from.env.entrez.fc(entrez.fc = fc.mat, mcol, calculate.significance = F, split = F)
mat.43t = tabulate.psf.results(psf.results, fc.mat)
psf.results = psf.from.env.entrez.fc(entrez.fc = fc.mat, kegg.collection, calculate.significance = F, split = F)
mat.43.or = tabulate.psf.results(psf.results, fc.mat)
mat.43t
mat.43.or
edgeData(mlt, '31', '21', attr = "impact")
edgeData(go, '31', '21', attr = "impact")
edgeData(mgg, '31', '21', attr = "impact")
colnames(fc.mat)
